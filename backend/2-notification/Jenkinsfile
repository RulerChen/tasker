namespace = "production"
serviceName = "tasker-notification"
service = "Tasker Notification"

def groovyMethods

pipeline {
  agent {
    label 'Jenkins-Agent'
  }

  tools {
    nodejs "NodeJS"
    dockerTool "Docker"
  }

  environment {
    DOCKER_CREDENTIALS = credentials("dockerhub")
    IMAGE_NAME = "rulerchen" + "/" + "tasker-2-notification"
    IMAGE_TAG = "stable-${BUILD_NUMBER}"
  }

  stages {
    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Prepare Environment") {
      steps {
        sh "[ -d pipeline ] || mkdir pipeline"
        dir("pipeline") {
          git branch: 'main', credentialsId: 'github', url: 'https://github.com/RulerChen/tasker-jenkins'
          script {
            groovyMethods = load("functions.groovy")
          }
        }
        withCredentials([string(credentialsId: 'NPM_TOKEN', variable: 'NPM_TOKEN')]) {
          git branch: 'main', credentialsId: 'github', url: 'https://github.com/RulerChen/tasker-notification'
          sh 'npm install'
        }
      }
    }

    stage("Lint Check") {
      steps {
        sh 'npm run lint'
      }
    }

    stage("Unit Test") {
      steps {
        sh 'npm run test'
      }
    }

    stage("Write Secret") {
      steps {
        withCredentials([string(credentialsId: 'NPM_TOKEN', variable: 'NPM_TOKEN')]) {
          sh 'echo $NPM_TOKEN > npmrc'
        }
      }
    }

    stage("Build and Push") {
      steps {
        sh 'docker login -u $DOCKER_CREDENTIALS_USR --password $DOCKER_CREDENTIALS_PSW'

        sh 'curl -sL https://github.com/docker/buildx/releases/download/v0.12.1/buildx-v0.12.1.linux-amd64 -o buildx-v0.12.1-linux-amd64'
        sh 'mkdir -p ~/.docker/cli-plugins'
        sh 'mv buildx-v0.12.1-linux-amd64 docker-buildx'
        sh 'mv docker-buildx ~/.docker/cli-plugins'
        sh 'chmod +x ~/.docker/cli-plugins/docker-buildx'

        withEnv(["DOCKER_BUILDKIT=1"]) {
          sh "docker image build --secret id=npmrc,src=npmrc -t $IMAGE_NAME ."
        }

        sh "docker tag $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG"
        sh "docker tag $IMAGE_NAME $IMAGE_NAME:stable"
        sh "docker push $IMAGE_NAME:$IMAGE_TAG"
        sh "docker push $IMAGE_NAME:stable"
      }
    }

    stage("Clean Artifacts") {
      steps {
        sh "docker rmi $IMAGE_NAME:$IMAGE_TAG"
        sh "docker rmi $IMAGE_NAME:stable"
      }
    }

    stage("Create New Pods") {
      steps {
          withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'minikube', contextName: 'minikube', credentialsId: 'jenkins-k8s-token', namespace: '', serverUrl: 'https://172.31.27.146:8443']]) {
          script {
            def pods = groovyMethods.findPodsFromName("${namespace}", "${serviceName}")
            for (podName in pods) {
              sh """
                kubectl delete -n ${namespace} pod ${podName}
                sleep 10s
              """
            }
          }
        }
      }
    }
  }
}
